第一天
1、HTML5概念：
    制作网页： html4.0
        HTML   结构
        CSS    样式
        JS     行为

       ipone6  -->ipone7
    狭义的理解： html5 是 html4的升级版 在功能上有所增强
           html4.01 -->html5
           css2.0  --->css3
           js--->  新增的js API  地理定位  重力感应  web存储

    HTML5 广义的概念:
          代表在浏览器发展的一个阶段，是一套前端技术的统称，包括 html5 css3 jsAPI


    html5的语法：
        更简洁
        更宽松：
            单标签不用写关闭符号  <br>
            双标签 不用写结束标签 <li>aa
            骨架表签可以省略

        实际工作中不能太随意

        <meta />  描述网页的元信息



2、新增语义化标签

     标签语义化：在合适的地方用合适的标签   seo优化

      p   h1   img   div  span

     header 头部
     nav 导航
     section 区域
     aside 侧边栏
     article 文章
     footer 底部


     低版本浏览器不识别 h5语义标签的解决办法
     引入：html5shiv.js

   
        l:less 小与
        t：than 比较
        e:equal 等于
        g:great 大于

    <!--[if lte ie 8]>
        <script src="html5shiv.min.js"></script>
    <![endif]-->

3、表单 (有兼容性问题)
    用于收集用户的信息，提交给服务器

   表单类型： type
   <input type="text"/>
    email   邮箱
    tel     电话
    url     地址
    number  数字
    search  搜索框
    color   取色器
    range   滑块 滑动条
    time    时间
    date    日期
    datetime
    month   月份
    week    星期

   表单元素：
        datalist  数据列表  id="car"         list="car"
        option

   表单属性：
        <input type="text" placeholder />
        placeholder:提示文字
        autofocus:  自动聚焦
        autocomplete:自动完成  on  开启 off 关闭
        multiple:   多选  上传多个文件
        required:   必填
        form:       指定所有属的表单域
        pattern:    自定义正则验证规则
        novalidate: 关闭表单的验证功能  用于form 表单

   表单事件：
        oninput  当用户输入是触发
        oninvalid  当验证不通过时触发 ，设置验证不通过时的提示文字

4、多媒体
    canvas  画布
    audio   音频
    video   视频
    img




    在h5之前，网页需要播放视频和音频： 依赖于第3方的插件
        xp     mediaplayer
        快播   浏览器会自动调用  快播插件来网页视频
        flash插件


    h5 中： 提供了音频和视频标签
        <audio src="hlw.mp3"></audio>

        <audio autoplay controls loop>
            <source src="music/yinyue.mp3"/>
            <source src="music/yinyue.ogg"/>
            <source src="music/yinyue.wav"/>
            抱歉，你的浏览器版本贼低...
        </audio>

        <video controls>
            <source src="video/movie.mp4"/>
            <source src="video/movie.webm"/>
            <source src="video/movie.ogg"/>
            抱歉，你的浏览器版本贼低...
        </video>

        属性：
        autoplay:自动播放
        controls:控制条
        loop:循环播放

        API方法：
        paly()  播放
        pause() 暂停

        paused  属性 是否暂停





5、DOM拓展 （js API方面的增强)
    html5-->html4
    html5 新增标签
    css3 新增了属性
    js新增API


    document对象：文档对象模型
    当在浏览器中 打开一个页面时，浏览器首先会来解析我们的页面，会把我们的页面解析成一个document对象；

    一、获取DOM元素
            document.getElementById();
            document.getElementsByTagName();
            document.getElementsByClassName();

            比较方便的获取元素的方式：
            jq:$();
                $('div');
                $('.box');
                $('#box');
                $('ol li');

         获取单个元素：
         document.querySelector('div span');
         获取多个元素：
         document.querySelectorAll('');

    二、控制类名的API：
        jq: addClass()  removeClass()  hasClass()  toggleClass();

        js:box.className='test';

        html5新增的操作类名的方式：
            box.classList.add(''); 添加类名
            box.classList.remove();删除类名
            box.classList.contains(); 判断是否有指定的类名 true false
            box.classList.toggle(); 切换类名

    三、标签的自定义属性：
        <div  title="aa" data-name="xs" data-my-age="19" data-myid="1" ></div>

        box.dataset['name'];
        box.dataset['myAge']=30;

        作用：存储数据



第二天

1、css3简介
    html5是html4 升级版
        html-->html5
        css2-->css3
       坚持渐进增强原则
             在低版本浏览器保证最基本功能，
             高版本的浏览器有更好的用户体验；


2、css3选择器

    jq: $('div .box');
    css2中的选择器：

        div 标签选择器
        .box  类名选择器
        #box id选择器
        *  通配符
        div .box  后代
        div,p   并集
        div.box 交集
        div>p  子代选择器

        div+p  div后面的第一个p 相邻
        div~p  div后面所有的P （兄弟 同级）


        选择器；
        js    jq

    1、属性选择器
        id 通过id 进行选择 #
        类名 通过 类名选择 .
        属性 通过属性选择  []

        语法：
        符号：^ :开始   $:结束  *：包含

        div[class="aa"]  选择页面中带有title属性的div
        div[title="aa"]  选择页面中带有title属性的div,并且值为aa
        div[title^="aa"]  选择页面中带有title属性的div,并且值以aa开头
        div[title$="aa"]  选择页面中带有title属性的div,并且值以aa结尾
        div[title*="aa"]  选择页面中带有title属性的div,并且值包含aa

    2、结构伪类选择器  :
        ：hover      :active    符号： 冒号
        E:fisrt-child  E元素的父盒子中的第一个子元素
        E:last-child   E元素的父盒子中的最后一个子元素
        E：nth-child(n) E元素的父盒子中第n个子元素
        E：nth-last-child(n)  E元素的父盒子中倒数第n个子元素

        n是从0开始的整数 0,1,2,3,4,5。。。。
         但是：n小于1无效

         2n even 偶数
         2n-1 odd 奇数
         -n+5  选择中前5个  -n+5  7n

         ul>li{$}*35 快速生成 35个li标签

         子元素的排序不分类型，但是选择时 分类型  p:nth-child(2);



         其他伪类选择器：

         E:empty 当元素为空是会选中

         E:not(:nth-child(2)); 排除括号中指定的元素

         E:target 表示 E元素被激活是的状态 必须配合锚点使用

    3-伪元素
        符号：::   ::before
             css2  e:before

              伪元素：
                假的  标签 ，标记
                用css的样式 模拟出 标签的效果    seo
        E::before
        E::after


        用样式 模拟出 标签的效果
        伪元素   E::before  E::after  行内显示模式
        必须有content  content:"";

        .clearfix::after,.clearfix::before{
                     content:"";
                     height:0;
                     line-height:0;
                     display:block;
                     clear:both;
                     visibilty:hidden;
                 }

         .clearfix{
             zoom:1;
         }

        E::first-line 选中第一行
        E::first-letter  选中第一个字
        E::selection   选中的区域  设置 背景颜色 和文字颜色


2、文字阴影
    css3懂你的美

    text-shadow

    text-shadow:1px 1px 1px red , 2px 2px 2px blue;

    border:1px solid red;

    background:red no-repeat;

    文本阴影 : 阴影水平位移  阴影垂直位移  模糊程度 阴影颜色

    加多个阴影，每个阴影按标准的语法来写，多个阴影之间使用 逗号隔开；

3、css3中的颜色模式
    css2设置透明的颜色：
        opacity:  给大盒子设置半透明会直接污染小盒子
        transparent 透明颜色 只能设置全透明

    css3中的颜色模式： color:red;
        RGBA:
        red： 0-255
        green: 0-255
        blue: 0-255
        alpha:透明度  0-1

        HSLA:
        H:色调  0-360
        S:饱和度 0-100%
        L:亮度 0-100%
        A:alpha  0-1

4、css3中的盒子模型
     css2 盒子模型： margin+paddidng+border+内容
     css3 盒子模式：内减模式  box-sizing:border-box;   content-box

    win+R  画图：mspaint　　计算器：calc

5、浏览器私有前缀
    解决浏览器兼容问题
    -webkit- : 谷歌 苹果
    -ms-:  IE  微软
    -moz-: 火狐
    -o-: opear   欧朋

6 过渡

     过渡：有一种状态 贱贱(渐渐)的 过渡另一种状态

     transition:过渡属性  持续时间 延迟  运动曲线；
     transition：all 1s;
     all:所有的属性都发生过渡；

     transition-property:过渡的属性 all  width
     transition-duration:持续时间 1s
     transition-timing-function:运动曲线
        linear 线性匀速
        ease-in-out　先加速 后减速
     transition-delay: 延迟执行


第三天


1-边框 border
    边框的圆角：
        border-radius:

        border-top-left-raudius  : 水平半径 垂直半径
        border-top-left-radius: 50px 100px;
        border-top-right-radius: 50px 100px;
        border-bottom-left-radius: 50px 100px;
        border-bottom-right-radius: 50px 100px;

        border-radius:水平半径/垂直半径  30px/60px
        赋值顺序：
            从左上开始 顺时针赋值，如果这个角没有值，取对角的值

    边框的阴影：
        box-shadow:水平位移 垂直位移  模糊程度  阴影大小 阴影的颜色 inset;

2-背景  background
    背景的尺寸
        background-size:
            100px 100px
            50%  50%
            cover 保证会铺满盒子，有可能不完全显示背景图片
            contain 保证背景图片会完整的等比例的 包含在盒子中，有可能不会铺满盒子

    背景的原点
          background-origin
            content-box
            paddding-box
            border-box
          用于设置背景图片从哪个盒子开始平铺

    背景裁剪
         backgound-clip
            content-box
            paddding-box
            border-box
         用于设置背景图片从哪个盒子开始裁剪

    多个背景
        一个盒子可以设置多个背景，
           背景的语法格式正常书写，多个背景之间使用逗号隔开；
           背景层级：先写的背景在上面，后写的在下面；

3-渐变  gradient
    渐变属于background-image属性
    线性渐变：linear-gradient
        background-image:linear-gradient(方向,起始颜色,终止颜色);
            方向： to  left  right  top bottom  30deg

    径向渐变：radial-gradient
        background-image:radial-gradient(辐射半径 中心点位置,起始颜色,终止颜色);
            辐射半径： 50px 圆    50px  100px  椭圆2
            中心位置： at  left  center   right  top  center   bottom   50px 5px


4-2d 变换transform
    缩放 scale
        scale(水平缩放比例，垂直缩放比例）
        如果只有一个值，等比例缩放  不能为百分比


    旋转 rotate   角度 deg
        正值  顺时针
        负值  逆时针

    位移 translate
        tranlate(水平位移，垂直位移）；
              -100px  40px
              50%，50%  百分比是相对于自身的宽高而言的
              如果只有一个值 水平位移

              -50%  向左走自己的宽度一半
              transform: translate(-50%);
              同样可以让定位的盒子局中

    扭曲 skew
        skew(水平角度，垂直角度);


        如果多个属性发生过渡，多个属性连写，之间使用空格隔开
        transform:translate(-200px,200px)  rotate(45deg);

    设置变换中心：
         transform-origin：
            取值：left  top center  right bottom    50px 50px；

第四天
1、3d变换

    rotateX() 沿着x轴旋转
    rotateY() 沿着y轴旋转
    rotateZ() 沿着z轴旋转

    translateX() 沿x轴位移
    translateY() 沿Y轴位移
    translateZ() 沿Z轴位移  translateZ 需要配合透视使用 perspective


    旋转方向：
        对着正方向去看 都是顺时针旋转

    backface-visibility:hidden 背面不可见

    伪元素 获取自定义属性的值
        content:attr(data-text);
        // 自定义属性的作用 存储数据
        <span data-text="传">传</span>

    透视
         如果希望看到  3d效果 需要添加透视 近大远小
         透视 设置是 盒子 和 用户眼睛的距离，加给变换元素的父盒子
         透视的值越大效果越不明显  perspective:1000px;

         透视产生的3d效果,只是视觉上的呈现，并不是真正的3d


    真正的3d的盒子
        让子盒子保持真正的3d效果
        transform-style:perserve-3d;
        注意点：加给 父盒子

动画：
      css3中也可以来定义动画

                和 js使用函数类似     先定义 在调用

                function say(){}

                定义动画：

                @keyframes  动画名称{
                    from{
                        起始状态
                    }
                    to{
                        结束状态
                    }
                }


                @keyframes 动画名称{
                    0%{

                    }
                    30%{

                    }

                    100%{

                    }
                }


                调用动画

      animation: 动画名称 持续时间 ；


                  调用动画: 动画名称 持续时间 执行次数  是否反向 延迟执行 运动曲线..

                  动画名称： animation-name: move
                  单次动画执行时间：animation-duration: 2s;
                  重复次数  animation-iteration-count: 1;   infinite 无数次
                  动画方向：animation-direction    alternate：交替  normal正常的
                  动画延迟：animation-delay: 1s;
                  动画结束后的所保持的状态：
                  animation-fill-mode:
                      backwards:保持动画开始前的状态
                      forwards:保持动画结束后的状态
                  运动曲线：animation-timing-function
                    linear 运算  ease-in-out :先加速后减速  steps
                    steps(ｎ) 让动画分步完成
                    animation-timing-function: steps(15);


            动画的播放状态 ：paused 暂停 running 运行
                    animation-play-state: paused;



第六天


1、视频
    属性：
         paused: 视频的播放暂停状态
         duration:视频的总时长
         currentTime:当前播放时间

    方法： play() 播放
           pause()暂停
    事件：
        oncanplay： 当视频加载完成之后
        ontimeupdate: 当视频当前时间 改变之后触发

    全屏：
        video.webkitRequsetFullScreen();

 2、拖拽：
    （1、需要设置拖拽：draggable="true"
    （2、拖拽元素：
        ondragstart: 拖拽开始
        ondragend:拖拽结束
        ondragleave: 当鼠标拖拽离开 被拖拽元素时
        ondrag:　当拖拽时，持续触发
    （3、目标元素：
        ondragenter:当被拖拽元素进入目标元素时
        ondragleave:当鼠标进入目标元素时
        ondragover: 当被拖拽元素在目标元素上时，持续触发
            --> e.preventDefault(); 阻止拖拽的默认行为；
        ondrop:当在目标元素上松开鼠标时触发；

3、地理定位API

    navigator.geoloaction.getCurrentPosition(successCallback, errorCallback)获取当前地理信息
   
    （1、当成功获取地理信息后，会调用succssCallback，
        并返回一个包含位置信息的对象position。Coords(坐标)
        position.coords.latitude纬度
        position.coords.longitude经度
    （2、当获取地理信息失败后，会调用errorCallback，并返回错误信息error


4、web存储
        cookie : 4k  解析复杂
        window.sessionStorage  会话存储
            生命周期为关闭浏览器窗口
            在同一个窗口下数据可以共享
            sessionStorage约5M
        window.localStorage 本地存储
            永久生效，除非手动删除
            可以多窗口共享
            localStorage约20M
        方法详解
            setItem(key, value) 设置存储内容
            getItem(key) 读取存储内容
            removeItem(key) 删除键值为key的存储内容
            clear() 清空所有存储内容

5、网络状态    
       window.ononline用户网络连接时被调用
       Window.onoffline用户网络断开时被调用

6、文件操作：

FileList对象
	HTML5中通过为表单元素添加multiple属性实现文件多选，因此通过<input type="file">上传文件后得到的FileList对象是以伪数组形式存在。
  input.files[0]


FileReader对象  var fr=new FileReader();
	HTML5新增内建对象，用以读取本地文件。
	属性：result文件读取的结果
	事件：onload文件读取结束
	readAsText()：将文件以文本方式读取，读取的结果为这个文本文件中的内容。
	readAsDataURL()： 以URL的形式读取文件信息。


7、我的密钥(yue):
  NsGTBiDpgGQpI7KDmYNAPGuHWGjCh1zk
  ovxzhP5jX4qRUboF86IOlRCnai0whIje

  


















     

